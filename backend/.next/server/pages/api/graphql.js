"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/graphql";
exports.ids = ["pages/api/graphql"];
exports.modules = {

/***/ "apollo-server-micro":
/*!**************************************!*\
  !*** external "apollo-server-micro" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("apollo-server-micro");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("cors");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgraphql.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgraphql.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_graphql_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/graphql.js */ \"(api)/./pages/api/graphql.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_graphql_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_graphql_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/graphql\",\n        pathname: \"/api/graphql\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_graphql_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmdyYXBocWwmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmdyYXBocWwuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUQ7QUFDbkQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaXNwYXRjaC1iYWNrZW5kLz84YTU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZ3JhcGhxbC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dyYXBocWxcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ncmFwaHFsXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgraphql.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/database.js":
/*!*************************!*\
  !*** ./lib/database.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Pool } = __webpack_require__(/*! pg */ \"pg\");\n(__webpack_require__(/*! dotenv */ \"dotenv\").config)({\n    path: \"./env.local\"\n});\nconst pool = new Pool({\n    host: \"postgres\" || 0,\n    port: \"5432\" || 0,\n    database: \"dispatch_db\" || 0,\n    user: \"dispatch_user\" || 0,\n    password: \"dispatch_password\" || 0,\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000\n});\npool.on(\"connect\", ()=>{\n    console.log(\"✅ Connected to PostgreSQL database\");\n});\npool.on(\"error\", (err)=>{\n    console.error(\"❌ Database connection error:\", err);\n});\nconst query = async (text, params)=>{\n    const start = Date.now();\n    try {\n        const res = await pool.query(text, params);\n        const duration = Date.now() - start;\n        console.log(\"\\uD83D\\uDCCA Query executed:\", {\n            text,\n            duration,\n            rows: res.rowCount\n        });\n        return res;\n    } catch (error) {\n        console.error(\"❌ Database query error:\", error);\n        throw error;\n    }\n};\nconst getClient = async ()=>{\n    return await pool.connect();\n};\nmodule.exports = {\n    query,\n    getClient,\n    pool\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGF0YWJhc2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRUEsSUFBSSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3pCQSxvREFBd0IsQ0FBQztJQUFFRSxNQUFNO0FBQWM7QUFFL0MsTUFBTUMsT0FBTyxJQUFJSixLQUFLO0lBQ3BCSyxNQUFNQyxVQUFtQixJQUFJO0lBQzdCRyxNQUFNSCxNQUFtQixJQUFJLENBQUk7SUFDakNLLFVBQVVMLGFBQW1CLElBQUk7SUFDakNPLE1BQU1QLGVBQW1CLElBQUk7SUFDN0JTLFVBQVVULG1CQUF1QixJQUFJO0lBQ3JDVyxLQUFLO0lBQ0xDLG1CQUFtQjtJQUNuQkMseUJBQXlCO0FBQzNCO0FBRUFmLEtBQUtnQixFQUFFLENBQUMsV0FBVztJQUNqQkMsUUFBUUMsR0FBRyxDQUFDO0FBQ2Q7QUFFQWxCLEtBQUtnQixFQUFFLENBQUMsU0FBUyxDQUFDRztJQUNoQkYsUUFBUUcsS0FBSyxDQUFDLGdDQUFnQ0Q7QUFDaEQ7QUFFQSxNQUFNRSxRQUFRLE9BQU9DLE1BQU1DO0lBQ3pCLE1BQU1DLFFBQVFDLEtBQUtDLEdBQUc7SUFDdEIsSUFBSTtRQUNGLE1BQU1DLE1BQU0sTUFBTTNCLEtBQUtxQixLQUFLLENBQUNDLE1BQU1DO1FBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7UUFDOUJQLFFBQVFDLEdBQUcsQ0FBQyxnQ0FBc0I7WUFBRUk7WUFBTU07WUFBVUMsTUFBTUYsSUFBSUcsUUFBUTtRQUFDO1FBQ3ZFLE9BQU9IO0lBQ1QsRUFBRSxPQUFPUCxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQywyQkFBMkJBO1FBQ3pDLE1BQU1BO0lBQ1I7QUFDRjtBQUVBLE1BQU1XLFlBQVk7SUFDaEIsT0FBTyxNQUFNL0IsS0FBS2dDLE9BQU87QUFDM0I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZiO0lBQ0FVO0lBQ0EvQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGlzcGF0Y2gtYmFja2VuZC8uL2xpYi9kYXRhYmFzZS5qcz9lZWE1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUG9vbCB9ID0gcmVxdWlyZSgncGcnKTtcclxucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKHsgcGF0aDogJy4vZW52LmxvY2FsJyB9KTtcclxuXHJcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XHJcbiAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAncG9zdGdyZXMnLFxyXG4gIHBvcnQ6IHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgNTQzMixcclxuICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCAnZGlzcGF0Y2hfZGInLFxyXG4gIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgJ2Rpc3BhdGNoX3VzZXInLFxyXG4gIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnZGlzcGF0Y2hfcGFzc3dvcmQnLFxyXG4gIG1heDogMjAsXHJcbiAgaWRsZVRpbWVvdXRNaWxsaXM6IDMwMDAwLFxyXG4gIGNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzOiAyMDAwLFxyXG59KTtcclxuXHJcbnBvb2wub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ+KchSBDb25uZWN0ZWQgdG8gUG9zdGdyZVNRTCBkYXRhYmFzZScpO1xyXG59KTtcclxuXHJcbnBvb2wub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IoJ+KdjCBEYXRhYmFzZSBjb25uZWN0aW9uIGVycm9yOicsIGVycik7XHJcbn0pO1xyXG5cclxuY29uc3QgcXVlcnkgPSBhc3luYyAodGV4dCwgcGFyYW1zKSA9PiB7XHJcbiAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydDtcclxuICAgIGNvbnNvbGUubG9nKCfwn5OKIFF1ZXJ5IGV4ZWN1dGVkOicsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBnZXRDbGllbnQgPSBhc3luYyAoKSA9PiB7XHJcbiAgcmV0dXJuIGF3YWl0IHBvb2wuY29ubmVjdCgpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgcXVlcnksXHJcbiAgZ2V0Q2xpZW50LFxyXG4gIHBvb2xcclxufTtcclxuXHJcbiJdLCJuYW1lcyI6WyJQb29sIiwicmVxdWlyZSIsImNvbmZpZyIsInBhdGgiLCJwb29sIiwiaG9zdCIsInByb2Nlc3MiLCJlbnYiLCJEQl9IT1NUIiwicG9ydCIsIkRCX1BPUlQiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJ1c2VyIiwiREJfVVNFUiIsInBhc3N3b3JkIiwiREJfUEFTU1dPUkQiLCJtYXgiLCJpZGxlVGltZW91dE1pbGxpcyIsImNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzIiwib24iLCJjb25zb2xlIiwibG9nIiwiZXJyIiwiZXJyb3IiLCJxdWVyeSIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsInJvd3MiLCJyb3dDb3VudCIsImdldENsaWVudCIsImNvbm5lY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/database.js\n");

/***/ }),

/***/ "(api)/./lib/resolvers.js":
/*!**************************!*\
  !*** ./lib/resolvers.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { query } = __webpack_require__(/*! ./database */ \"(api)/./lib/database.js\");\nconst resolvers = {\n    Query: {\n        locations: async ()=>{\n            try {\n                const result = await query(`\r\n          SELECT \r\n            i.location_id,\r\n            i.location_name,\r\n            ST_Y(i.center_point) as latitude,\r\n            ST_X(i.center_point) as longitude,\r\n            i.elevation_m,\r\n            ut.description as unit_type,\r\n            ut.unit_type_id,\r\n            CASE \r\n              WHEN ut.description IN ('Workshop', 'Fuelbay', 'Crusher', 'Stockpile', 'Blast', 'Pit', 'Region', 'Call Point', 'Shiftchange') \r\n              THEN 'infrastructure'\r\n              WHEN ut.description IN ('Truck', 'Shovel', 'Dump', 'Dozer', 'Grader', 'Wheel Dozer', 'Aux Crusher', 'Foreman', 'Water Truck', 'Utility Vehicle', 'Man Bus', 'Generic Auxil', 'Drill')\r\n              THEN 'vehicle'\r\n              ELSE 'infrastructure'\r\n            END as location_category,\r\n            p.pit_name,\r\n            r.region_name\r\n          FROM infrastructure i\r\n          LEFT JOIN unit_types ut ON i.unit_id = ut.unit_type_id\r\n          LEFT JOIN pits p ON i.pit_id = p.pit_id\r\n          LEFT JOIN regions r ON i.region_id = r.region_id\r\n          WHERE i.center_point IS NOT NULL\r\n          ORDER BY i.location_id\r\n        `);\n                const locations = result.rows.map((row)=>({\n                        location_id: row.location_id,\n                        location_name: row.location_name,\n                        latitude: parseFloat(row.latitude),\n                        longitude: parseFloat(row.longitude),\n                        elevation_m: row.elevation_m ? parseFloat(row.elevation_m) : null,\n                        unit_type: row.unit_type,\n                        unit_type_id: row.unit_type_id,\n                        location_category: row.location_category,\n                        pit_name: row.pit_name,\n                        region_name: row.region_name\n                    }));\n                // Debug: Log coordinate ranges\n                if (locations.length > 0) {\n                    const lats = locations.map((l)=>l.latitude).filter((lat)=>lat !== null);\n                    const lngs = locations.map((l)=>l.longitude).filter((lng)=>lng !== null);\n                    console.log(\"\\uD83D\\uDCCD Location coordinate ranges:\");\n                    console.log(\"  Latitude range:\", Math.min(...lats), \"to\", Math.max(...lats));\n                    console.log(\"  Longitude range:\", Math.min(...lngs), \"to\", Math.max(...lngs));\n                }\n                return locations;\n            } catch (error) {\n                console.error(\"Error fetching locations:\", error);\n                throw new Error(\"Failed to fetch locations\");\n            }\n        },\n        segments: async (_, { limit = 1000 })=>{\n            try {\n                const result = await query(`\r\n          SELECT \r\n            ls.lane_id,\r\n            ls.road_id,\r\n            CASE \r\n              WHEN ls.lane_id LIKE '%_forward' THEN 'forward'\r\n              WHEN ls.lane_id LIKE '%_reverse' THEN 'reverse'\r\n              ELSE 'unknown'\r\n            END as direction,\r\n            ls.length_m,\r\n            ls.time_empty_seconds,\r\n            ls.time_loaded_seconds,\r\n            ls.is_closed,\r\n            ST_AsGeoJSON(ls.geometry) as geometry,\r\n            ST_Y(ST_StartPoint(ls.geometry)) as start_latitude,\r\n            ST_X(ST_StartPoint(ls.geometry)) as start_longitude,\r\n            ST_Y(ST_EndPoint(ls.geometry)) as end_latitude,\r\n            ST_X(ST_EndPoint(ls.geometry)) as end_longitude\r\n          FROM lane_segments ls\r\n          WHERE ST_Y(ST_StartPoint(ls.geometry)) BETWEEN -60 AND -20  -- Filter out bad coordinates\r\n            AND ST_X(ST_StartPoint(ls.geometry)) BETWEEN 140 AND 155  -- Filter out bad coordinates\r\n            AND ST_Y(ST_EndPoint(ls.geometry)) BETWEEN -60 AND -20    -- Filter out bad coordinates\r\n            AND ST_X(ST_EndPoint(ls.geometry)) BETWEEN 140 AND 155    -- Filter out bad coordinates\r\n          ORDER BY ls.road_id, ls.lane_id\r\n          LIMIT $1\r\n        `, [\n                    limit\n                ]);\n                return result.rows.map((row)=>({\n                        lane_id: row.lane_id,\n                        road_id: row.road_id,\n                        direction: row.direction,\n                        length_m: parseFloat(row.length_m),\n                        time_empty_seconds: parseFloat(row.time_empty_seconds),\n                        time_loaded_seconds: parseFloat(row.time_loaded_seconds),\n                        is_closed: row.is_closed,\n                        geometry: row.geometry,\n                        start_latitude: parseFloat(row.start_latitude),\n                        start_longitude: parseFloat(row.start_longitude),\n                        end_latitude: parseFloat(row.end_latitude),\n                        end_longitude: parseFloat(row.end_longitude)\n                    }));\n            } catch (error) {\n                console.error(\"Error fetching segments:\", error);\n                throw new Error(\"Failed to fetch segments\");\n            }\n        },\n        location: async (_, { id })=>{\n            try {\n                const result = await query(`\r\n          SELECT \r\n            i.location_id,\r\n            i.location_name,\r\n            ST_Y(i.center_point) as latitude,\r\n            ST_X(i.center_point) as longitude,\r\n            i.elevation_m,\r\n            ut.description as unit_type,\r\n            ut.unit_type_id,\r\n            CASE \r\n              WHEN ut.description IN ('Workshop', 'Fuelbay', 'Crusher', 'Stockpile', 'Blast', 'Pit', 'Region', 'Call Point', 'Shiftchange') \r\n              THEN 'infrastructure'\r\n              WHEN ut.description IN ('Truck', 'Shovel', 'Dump', 'Dozer', 'Grader', 'Wheel Dozer', 'Aux Crusher', 'Foreman', 'Water Truck', 'Utility Vehicle', 'Man Bus', 'Generic Auxil', 'Drill')\r\n              THEN 'vehicle'\r\n              ELSE 'infrastructure'\r\n            END as location_category,\r\n            p.pit_name,\r\n            r.region_name\r\n          FROM infrastructure i\r\n          LEFT JOIN unit_types ut ON i.unit_id = ut.unit_type_id\r\n          LEFT JOIN pits p ON i.pit_id = p.pit_id\r\n          LEFT JOIN regions r ON i.region_id = r.region_id\r\n          WHERE i.location_id = $1\r\n            AND i.center_point IS NOT NULL\r\n        `, [\n                    id\n                ]);\n                if (result.rows.length === 0) {\n                    return null;\n                }\n                const row = result.rows[0];\n                return {\n                    location_id: row.location_id,\n                    location_name: row.location_name,\n                    latitude: parseFloat(row.latitude),\n                    longitude: parseFloat(row.longitude),\n                    elevation_m: row.elevation_m ? parseFloat(row.elevation_m) : null,\n                    unit_type: row.unit_type,\n                    unit_type_id: row.unit_type_id,\n                    location_category: row.location_category,\n                    pit_name: row.pit_name,\n                    region_name: row.region_name\n                };\n            } catch (error) {\n                console.error(\"Error fetching location:\", error);\n                throw new Error(\"Failed to fetch location\");\n            }\n        },\n        segment: async (_, { id })=>{\n            try {\n                const result = await query(`\r\n          SELECT \r\n            ls.lane_id,\r\n            ls.road_id,\r\n            CASE \r\n              WHEN ls.lane_id LIKE '%_forward' THEN 'forward'\r\n              WHEN ls.lane_id LIKE '%_reverse' THEN 'reverse'\r\n              ELSE 'unknown'\r\n            END as direction,\r\n            ls.length_m,\r\n            ls.time_empty_seconds,\r\n            ls.time_loaded_seconds,\r\n            ls.is_closed,\r\n            ST_AsGeoJSON(ls.geometry) as geometry,\r\n            ST_Y(ST_StartPoint(ls.geometry)) as start_latitude,\r\n            ST_X(ST_StartPoint(ls.geometry)) as start_longitude,\r\n            ST_Y(ST_EndPoint(ls.geometry)) as end_latitude,\r\n            ST_X(ST_EndPoint(ls.geometry)) as end_longitude\r\n          FROM lane_segments ls\r\n          WHERE ls.lane_id = $1\r\n            AND ST_Y(ST_StartPoint(ls.geometry)) BETWEEN -30 AND -10  -- Queensland latitude range (filter out South Pole coordinates like -85)\r\n            AND ST_X(ST_StartPoint(ls.geometry)) BETWEEN 140 AND 155  -- Queensland longitude range (filter out Indian Ocean coordinates like 56)\r\n            AND ST_Y(ST_EndPoint(ls.geometry)) BETWEEN -30 AND -10    -- Queensland latitude range (filter out South Pole coordinates like -85)\r\n            AND ST_X(ST_EndPoint(ls.geometry)) BETWEEN 140 AND 155    -- Queensland longitude range (filter out Indian Ocean coordinates like 56)\r\n        `, [\n                    id\n                ]);\n                if (result.rows.length === 0) {\n                    return null;\n                }\n                const row = result.rows[0];\n                return {\n                    lane_id: row.lane_id,\n                    road_id: row.road_id,\n                    direction: row.direction,\n                    length_m: parseFloat(row.length_m),\n                    time_empty_seconds: parseFloat(row.time_empty_seconds),\n                    time_loaded_seconds: parseFloat(row.time_loaded_seconds),\n                    is_closed: row.is_closed,\n                    geometry: row.geometry,\n                    start_latitude: parseFloat(row.start_latitude),\n                    start_longitude: parseFloat(row.start_longitude),\n                    end_latitude: parseFloat(row.end_latitude),\n                    end_longitude: parseFloat(row.end_longitude)\n                };\n            } catch (error) {\n                console.error(\"Error fetching segment:\", error);\n                throw new Error(\"Failed to fetch segment\");\n            }\n        },\n        segmentsByRoad: async (_, { roadId })=>{\n            try {\n                const result = await query(`\r\n          SELECT \r\n            ls.lane_id,\r\n            ls.road_id,\r\n            CASE \r\n              WHEN ls.lane_id LIKE '%_forward' THEN 'forward'\r\n              WHEN ls.lane_id LIKE '%_reverse' THEN 'reverse'\r\n              ELSE 'unknown'\r\n            END as direction,\r\n            ls.length_m,\r\n            ls.time_empty_seconds,\r\n            ls.time_loaded_seconds,\r\n            ls.is_closed,\r\n            ST_AsGeoJSON(ls.geometry) as geometry,\r\n            ST_Y(ST_StartPoint(ls.geometry)) as start_latitude,\r\n            ST_X(ST_StartPoint(ls.geometry)) as start_longitude,\r\n            ST_Y(ST_EndPoint(ls.geometry)) as end_latitude,\r\n            ST_X(ST_EndPoint(ls.geometry)) as end_longitude\r\n          FROM lane_segments ls\r\n          WHERE ls.road_id = $1\r\n            AND ST_Y(ST_StartPoint(ls.geometry)) BETWEEN -30 AND -10  -- Queensland latitude range (filter out South Pole coordinates like -85)\r\n            AND ST_X(ST_StartPoint(ls.geometry)) BETWEEN 140 AND 155  -- Queensland longitude range (filter out Indian Ocean coordinates like 56)\r\n            AND ST_Y(ST_EndPoint(ls.geometry)) BETWEEN -30 AND -10    -- Queensland latitude range (filter out South Pole coordinates like -85)\r\n            AND ST_X(ST_EndPoint(ls.geometry)) BETWEEN 140 AND 155    -- Queensland longitude range (filter out Indian Ocean coordinates like 56)\r\n          ORDER BY ls.lane_id\r\n        `, [\n                    roadId\n                ]);\n                return result.rows.map((row)=>({\n                        lane_id: row.lane_id,\n                        road_id: row.road_id,\n                        direction: row.direction,\n                        length_m: parseFloat(row.length_m),\n                        time_empty_seconds: parseFloat(row.time_empty_seconds),\n                        time_loaded_seconds: parseFloat(row.time_loaded_seconds),\n                        is_closed: row.is_closed,\n                        geometry: row.geometry,\n                        start_latitude: parseFloat(row.start_latitude),\n                        start_longitude: parseFloat(row.start_longitude),\n                        end_latitude: parseFloat(row.end_latitude),\n                        end_longitude: parseFloat(row.end_longitude)\n                    }));\n            } catch (error) {\n                console.error(\"Error fetching segments by road:\", error);\n                throw new Error(\"Failed to fetch segments by road\");\n            }\n        },\n        locationsByCategory: async (_, { category })=>{\n            try {\n                const result = await query(`\r\n          SELECT \r\n            i.location_id,\r\n            i.location_name,\r\n            ST_Y(i.center_point) as latitude,\r\n            ST_X(i.center_point) as longitude,\r\n            i.elevation_m,\r\n            ut.description as unit_type,\r\n            ut.unit_type_id,\r\n            CASE \r\n              WHEN ut.description IN ('Workshop', 'Fuelbay', 'Crusher', 'Stockpile', 'Blast', 'Pit', 'Region', 'Call Point', 'Shiftchange') \r\n              THEN 'infrastructure'\r\n              WHEN ut.description IN ('Truck', 'Shovel', 'Dump', 'Dozer', 'Grader', 'Wheel Dozer', 'Aux Crusher', 'Foreman', 'Water Truck', 'Utility Vehicle', 'Man Bus', 'Generic Auxil', 'Drill')\r\n              THEN 'vehicle'\r\n              ELSE 'infrastructure'\r\n            END as location_category,\r\n            p.pit_name,\r\n            r.region_name\r\n          FROM infrastructure i\r\n          LEFT JOIN unit_types ut ON i.unit_id = ut.unit_type_id\r\n          LEFT JOIN pits p ON i.pit_id = p.pit_id\r\n          LEFT JOIN regions r ON i.region_id = r.region_id\r\n          WHERE i.center_point IS NOT NULL\r\n            AND CASE \r\n              WHEN ut.description IN ('Workshop', 'Fuelbay', 'Crusher', 'Stockpile', 'Blast', 'Pit', 'Region', 'Call Point', 'Shiftchange') \r\n              THEN 'infrastructure'\r\n              WHEN ut.description IN ('Truck', 'Shovel', 'Dump', 'Dozer', 'Grader', 'Wheel Dozer', 'Aux Crusher', 'Foreman', 'Water Truck', 'Utility Vehicle', 'Man Bus', 'Generic Auxil', 'Drill')\r\n              THEN 'vehicle'\r\n              ELSE 'infrastructure'\r\n            END = $1\r\n          ORDER BY i.location_id\r\n        `, [\n                    category\n                ]);\n                return result.rows.map((row)=>({\n                        location_id: row.location_id,\n                        location_name: row.location_name,\n                        latitude: parseFloat(row.latitude),\n                        longitude: parseFloat(row.longitude),\n                        elevation_m: row.elevation_m ? parseFloat(row.elevation_m) : null,\n                        unit_type: row.unit_type,\n                        unit_type_id: row.unit_type_id,\n                        location_category: row.location_category,\n                        pit_name: row.pit_name,\n                        region_name: row.region_name\n                    }));\n            } catch (error) {\n                console.error(\"Error fetching locations by category:\", error);\n                throw new Error(\"Failed to fetch locations by category\");\n            }\n        }\n    }\n};\nmodule.exports = {\n    resolvers\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/resolvers.js\n");

/***/ }),

/***/ "(api)/./lib/schema.js":
/*!***********************!*\
  !*** ./lib/schema.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { gql } = __webpack_require__(/*! apollo-server-micro */ \"apollo-server-micro\");\nconst typeDefs = gql`\r\n  type Location {\r\n    location_id: Int!\r\n    location_name: String\r\n    latitude: Float!\r\n    longitude: Float!\r\n    elevation_m: Float\r\n    unit_type: String\r\n    unit_type_id: Int\r\n    location_category: String!\r\n    pit_name: String\r\n    region_name: String\r\n  }\r\n\r\n  type LaneSegment {\r\n    lane_id: String!\r\n    road_id: Int!\r\n    direction: String!\r\n    length_m: Float!\r\n    time_empty_seconds: Float!\r\n    time_loaded_seconds: Float!\r\n    is_closed: Boolean!\r\n    geometry: String!\r\n    start_latitude: Float!\r\n    start_longitude: Float!\r\n    end_latitude: Float!\r\n    end_longitude: Float!\r\n  }\r\n\r\n  type Query {\r\n    locations: [Location!]!\r\n    segments(limit: Int): [LaneSegment!]!\r\n    location(id: Int!): Location\r\n    segment(id: String!): LaneSegment\r\n    segmentsByRoad(roadId: Int!): [LaneSegment!]!\r\n    locationsByCategory(category: String!): [Location!]!\r\n  }\r\n`;\nmodule.exports = {\n    typeDefs\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvc2NoZW1hLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUVBLEdBQUcsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUV4QixNQUFNQyxXQUFXRixHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQ3JCLENBQUM7QUFFREcsT0FBT0MsT0FBTyxHQUFHO0lBQUVGO0FBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaXNwYXRjaC1iYWNrZW5kLy4vbGliL3NjaGVtYS5qcz8zNzAzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZ3FsIH0gPSByZXF1aXJlKCdhcG9sbG8tc2VydmVyLW1pY3JvJyk7XHJcblxyXG5jb25zdCB0eXBlRGVmcyA9IGdxbGBcclxuICB0eXBlIExvY2F0aW9uIHtcclxuICAgIGxvY2F0aW9uX2lkOiBJbnQhXHJcbiAgICBsb2NhdGlvbl9uYW1lOiBTdHJpbmdcclxuICAgIGxhdGl0dWRlOiBGbG9hdCFcclxuICAgIGxvbmdpdHVkZTogRmxvYXQhXHJcbiAgICBlbGV2YXRpb25fbTogRmxvYXRcclxuICAgIHVuaXRfdHlwZTogU3RyaW5nXHJcbiAgICB1bml0X3R5cGVfaWQ6IEludFxyXG4gICAgbG9jYXRpb25fY2F0ZWdvcnk6IFN0cmluZyFcclxuICAgIHBpdF9uYW1lOiBTdHJpbmdcclxuICAgIHJlZ2lvbl9uYW1lOiBTdHJpbmdcclxuICB9XHJcblxyXG4gIHR5cGUgTGFuZVNlZ21lbnQge1xyXG4gICAgbGFuZV9pZDogU3RyaW5nIVxyXG4gICAgcm9hZF9pZDogSW50IVxyXG4gICAgZGlyZWN0aW9uOiBTdHJpbmchXHJcbiAgICBsZW5ndGhfbTogRmxvYXQhXHJcbiAgICB0aW1lX2VtcHR5X3NlY29uZHM6IEZsb2F0IVxyXG4gICAgdGltZV9sb2FkZWRfc2Vjb25kczogRmxvYXQhXHJcbiAgICBpc19jbG9zZWQ6IEJvb2xlYW4hXHJcbiAgICBnZW9tZXRyeTogU3RyaW5nIVxyXG4gICAgc3RhcnRfbGF0aXR1ZGU6IEZsb2F0IVxyXG4gICAgc3RhcnRfbG9uZ2l0dWRlOiBGbG9hdCFcclxuICAgIGVuZF9sYXRpdHVkZTogRmxvYXQhXHJcbiAgICBlbmRfbG9uZ2l0dWRlOiBGbG9hdCFcclxuICB9XHJcblxyXG4gIHR5cGUgUXVlcnkge1xyXG4gICAgbG9jYXRpb25zOiBbTG9jYXRpb24hXSFcclxuICAgIHNlZ21lbnRzKGxpbWl0OiBJbnQpOiBbTGFuZVNlZ21lbnQhXSFcclxuICAgIGxvY2F0aW9uKGlkOiBJbnQhKTogTG9jYXRpb25cclxuICAgIHNlZ21lbnQoaWQ6IFN0cmluZyEpOiBMYW5lU2VnbWVudFxyXG4gICAgc2VnbWVudHNCeVJvYWQocm9hZElkOiBJbnQhKTogW0xhbmVTZWdtZW50IV0hXHJcbiAgICBsb2NhdGlvbnNCeUNhdGVnb3J5KGNhdGVnb3J5OiBTdHJpbmchKTogW0xvY2F0aW9uIV0hXHJcbiAgfVxyXG5gO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7IHR5cGVEZWZzIH07XHJcblxyXG4iXSwibmFtZXMiOlsiZ3FsIiwicmVxdWlyZSIsInR5cGVEZWZzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/schema.js\n");

/***/ }),

/***/ "(api)/./pages/api/graphql.js":
/*!******************************!*\
  !*** ./pages/api/graphql.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var apollo_server_micro__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-server-micro */ \"apollo-server-micro\");\n/* harmony import */ var apollo_server_micro__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_server_micro__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/schema */ \"(api)/./lib/schema.js\");\n/* harmony import */ var _lib_schema__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_schema__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_resolvers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/resolvers */ \"(api)/./lib/resolvers.js\");\n/* harmony import */ var _lib_resolvers__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_resolvers__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var cors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cors */ \"cors\");\n/* harmony import */ var cors__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cors__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst apolloServer = new apollo_server_micro__WEBPACK_IMPORTED_MODULE_0__.ApolloServer({\n    typeDefs: _lib_schema__WEBPACK_IMPORTED_MODULE_1__.typeDefs,\n    resolvers: _lib_resolvers__WEBPACK_IMPORTED_MODULE_2__.resolvers,\n    introspection: true,\n    playground: true,\n    context: ({ req })=>{\n        return {\n            req\n        };\n    }\n});\nconst startServer = apolloServer.start();\nasync function handler(req, res) {\n    // Enable CORS\n    await new Promise((resolve, reject)=>{\n        cors__WEBPACK_IMPORTED_MODULE_3___default()({\n            origin: true,\n            credentials: true\n        })(req, res, (result)=>{\n            if (result instanceof Error) {\n                return reject(result);\n            }\n            return resolve(result);\n        });\n    });\n    await startServer;\n    await apolloServer.createHandler({\n        path: \"/api/graphql\"\n    })(req, res);\n}\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZ3JhcGhxbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQW1EO0FBQ1A7QUFDSTtBQUN4QjtBQUV4QixNQUFNSSxlQUFlLElBQUlKLDZEQUFZQSxDQUFDO0lBQ3BDQyxRQUFRQSxtREFBQUE7SUFDUkMsU0FBU0EsdURBQUFBO0lBQ1RHLGVBQWU7SUFDZkMsWUFBWTtJQUNaQyxTQUFTLENBQUMsRUFBRUMsR0FBRyxFQUFFO1FBQ2YsT0FBTztZQUFFQTtRQUFJO0lBQ2Y7QUFDRjtBQUVBLE1BQU1DLGNBQWNMLGFBQWFNLEtBQUs7QUFFdkIsZUFBZUMsUUFBUUgsR0FBRyxFQUFFSSxHQUFHO0lBQzVDLGNBQWM7SUFDZCxNQUFNLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDMUJaLDJDQUFJQSxDQUFDO1lBQ0hhLFFBQVE7WUFDUkMsYUFBYTtRQUNmLEdBQUdULEtBQUtJLEtBQUssQ0FBQ007WUFDWixJQUFJQSxrQkFBa0JDLE9BQU87Z0JBQzNCLE9BQU9KLE9BQU9HO1lBQ2hCO1lBQ0EsT0FBT0osUUFBUUk7UUFDakI7SUFDRjtJQUVBLE1BQU1UO0lBQ04sTUFBTUwsYUFBYWdCLGFBQWEsQ0FBQztRQUFFQyxNQUFNO0lBQWUsR0FBR2IsS0FBS0k7QUFDbEU7QUFFTyxNQUFNVSxTQUFTO0lBQ3BCQyxLQUFLO1FBQ0hDLFlBQVk7SUFDZDtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaXNwYXRjaC1iYWNrZW5kLy4vcGFnZXMvYXBpL2dyYXBocWwuanM/NzY2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9TZXJ2ZXIgfSBmcm9tICdhcG9sbG8tc2VydmVyLW1pY3JvJztcclxuaW1wb3J0IHsgdHlwZURlZnMgfSBmcm9tICcuLi8uLi9saWIvc2NoZW1hJztcclxuaW1wb3J0IHsgcmVzb2x2ZXJzIH0gZnJvbSAnLi4vLi4vbGliL3Jlc29sdmVycyc7XHJcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xyXG5cclxuY29uc3QgYXBvbGxvU2VydmVyID0gbmV3IEFwb2xsb1NlcnZlcih7XHJcbiAgdHlwZURlZnMsXHJcbiAgcmVzb2x2ZXJzLFxyXG4gIGludHJvc3BlY3Rpb246IHRydWUsXHJcbiAgcGxheWdyb3VuZDogdHJ1ZSxcclxuICBjb250ZXh0OiAoeyByZXEgfSkgPT4ge1xyXG4gICAgcmV0dXJuIHsgcmVxIH07XHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBzdGFydFNlcnZlciA9IGFwb2xsb1NlcnZlci5zdGFydCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xyXG4gIC8vIEVuYWJsZSBDT1JTXHJcbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgY29ycyh7XHJcbiAgICAgIG9yaWdpbjogdHJ1ZSxcclxuICAgICAgY3JlZGVudGlhbHM6IHRydWUsXHJcbiAgICB9KShyZXEsIHJlcywgKHJlc3VsdCkgPT4ge1xyXG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcmVqZWN0KHJlc3VsdCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBhd2FpdCBzdGFydFNlcnZlcjtcclxuICBhd2FpdCBhcG9sbG9TZXJ2ZXIuY3JlYXRlSGFuZGxlcih7IHBhdGg6ICcvYXBpL2dyYXBocWwnIH0pKHJlcSwgcmVzKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBhcGk6IHtcclxuICAgIGJvZHlQYXJzZXI6IGZhbHNlLFxyXG4gIH0sXHJcbn07XHJcblxyXG4iXSwibmFtZXMiOlsiQXBvbGxvU2VydmVyIiwidHlwZURlZnMiLCJyZXNvbHZlcnMiLCJjb3JzIiwiYXBvbGxvU2VydmVyIiwiaW50cm9zcGVjdGlvbiIsInBsYXlncm91bmQiLCJjb250ZXh0IiwicmVxIiwic3RhcnRTZXJ2ZXIiLCJzdGFydCIsImhhbmRsZXIiLCJyZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9yaWdpbiIsImNyZWRlbnRpYWxzIiwicmVzdWx0IiwiRXJyb3IiLCJjcmVhdGVIYW5kbGVyIiwicGF0aCIsImNvbmZpZyIsImFwaSIsImJvZHlQYXJzZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/graphql.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgraphql.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();